// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: bird.proto

package birdservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bird_BirdAdd_FullMethodName    = "/birdservice.Bird/BirdAdd"
	Bird_BirdUpdate_FullMethodName = "/birdservice.Bird/BirdUpdate"
	Bird_BirdList_FullMethodName   = "/birdservice.Bird/BirdList"
	Bird_BirdInfo_FullMethodName   = "/birdservice.Bird/BirdInfo"
	Bird_BirdDelete_FullMethodName = "/birdservice.Bird/BirdDelete"
)

// BirdClient is the client API for Bird service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BirdClient interface {
	BirdAdd(ctx context.Context, in *BirdAddReq, opts ...grpc.CallOption) (*BirdAddResp, error)
	BirdUpdate(ctx context.Context, in *BirdUpdateReq, opts ...grpc.CallOption) (*BirdUpdateResp, error)
	BirdList(ctx context.Context, in *BirdListReq, opts ...grpc.CallOption) (*BirdListResp, error)
	BirdInfo(ctx context.Context, in *BirdInfoReq, opts ...grpc.CallOption) (*BirdInfoResp, error)
	BirdDelete(ctx context.Context, in *BirdDeleteReq, opts ...grpc.CallOption) (*BirdDeleteResp, error)
}

type birdClient struct {
	cc grpc.ClientConnInterface
}

func NewBirdClient(cc grpc.ClientConnInterface) BirdClient {
	return &birdClient{cc}
}

func (c *birdClient) BirdAdd(ctx context.Context, in *BirdAddReq, opts ...grpc.CallOption) (*BirdAddResp, error) {
	out := new(BirdAddResp)
	err := c.cc.Invoke(ctx, Bird_BirdAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) BirdUpdate(ctx context.Context, in *BirdUpdateReq, opts ...grpc.CallOption) (*BirdUpdateResp, error) {
	out := new(BirdUpdateResp)
	err := c.cc.Invoke(ctx, Bird_BirdUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) BirdList(ctx context.Context, in *BirdListReq, opts ...grpc.CallOption) (*BirdListResp, error) {
	out := new(BirdListResp)
	err := c.cc.Invoke(ctx, Bird_BirdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) BirdInfo(ctx context.Context, in *BirdInfoReq, opts ...grpc.CallOption) (*BirdInfoResp, error) {
	out := new(BirdInfoResp)
	err := c.cc.Invoke(ctx, Bird_BirdInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) BirdDelete(ctx context.Context, in *BirdDeleteReq, opts ...grpc.CallOption) (*BirdDeleteResp, error) {
	out := new(BirdDeleteResp)
	err := c.cc.Invoke(ctx, Bird_BirdDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BirdServer is the server API for Bird service.
// All implementations must embed UnimplementedBirdServer
// for forward compatibility
type BirdServer interface {
	BirdAdd(context.Context, *BirdAddReq) (*BirdAddResp, error)
	BirdUpdate(context.Context, *BirdUpdateReq) (*BirdUpdateResp, error)
	BirdList(context.Context, *BirdListReq) (*BirdListResp, error)
	BirdInfo(context.Context, *BirdInfoReq) (*BirdInfoResp, error)
	BirdDelete(context.Context, *BirdDeleteReq) (*BirdDeleteResp, error)
	mustEmbedUnimplementedBirdServer()
}

// UnimplementedBirdServer must be embedded to have forward compatible implementations.
type UnimplementedBirdServer struct {
}

func (UnimplementedBirdServer) BirdAdd(context.Context, *BirdAddReq) (*BirdAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BirdAdd not implemented")
}
func (UnimplementedBirdServer) BirdUpdate(context.Context, *BirdUpdateReq) (*BirdUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BirdUpdate not implemented")
}
func (UnimplementedBirdServer) BirdList(context.Context, *BirdListReq) (*BirdListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BirdList not implemented")
}
func (UnimplementedBirdServer) BirdInfo(context.Context, *BirdInfoReq) (*BirdInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BirdInfo not implemented")
}
func (UnimplementedBirdServer) BirdDelete(context.Context, *BirdDeleteReq) (*BirdDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BirdDelete not implemented")
}
func (UnimplementedBirdServer) mustEmbedUnimplementedBirdServer() {}

// UnsafeBirdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BirdServer will
// result in compilation errors.
type UnsafeBirdServer interface {
	mustEmbedUnimplementedBirdServer()
}

func RegisterBirdServer(s grpc.ServiceRegistrar, srv BirdServer) {
	s.RegisterService(&Bird_ServiceDesc, srv)
}

func _Bird_BirdAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BirdAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).BirdAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_BirdAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).BirdAdd(ctx, req.(*BirdAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_BirdUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BirdUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).BirdUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_BirdUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).BirdUpdate(ctx, req.(*BirdUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_BirdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BirdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).BirdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_BirdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).BirdList(ctx, req.(*BirdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_BirdInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BirdInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).BirdInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_BirdInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).BirdInfo(ctx, req.(*BirdInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_BirdDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BirdDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).BirdDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_BirdDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).BirdDelete(ctx, req.(*BirdDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bird_ServiceDesc is the grpc.ServiceDesc for Bird service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bird_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "birdservice.Bird",
	HandlerType: (*BirdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BirdAdd",
			Handler:    _Bird_BirdAdd_Handler,
		},
		{
			MethodName: "BirdUpdate",
			Handler:    _Bird_BirdUpdate_Handler,
		},
		{
			MethodName: "BirdList",
			Handler:    _Bird_BirdList_Handler,
		},
		{
			MethodName: "BirdInfo",
			Handler:    _Bird_BirdInfo_Handler,
		},
		{
			MethodName: "BirdDelete",
			Handler:    _Bird_BirdDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bird.proto",
}
