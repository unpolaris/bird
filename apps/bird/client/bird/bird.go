// Code generated by goctl. DO NOT EDIT.
// Source: bird.proto

package bird

import (
	"context"

	"birdProtection/apps/bird/pb/birdservice"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BirdAddReq     = birdservice.BirdAddReq
	BirdAddResp    = birdservice.BirdAddResp
	BirdDeleteReq  = birdservice.BirdDeleteReq
	BirdDeleteResp = birdservice.BirdDeleteResp
	BirdInfoReq    = birdservice.BirdInfoReq
	BirdInfoResp   = birdservice.BirdInfoResp
	BirdListData   = birdservice.BirdListData
	BirdListReq    = birdservice.BirdListReq
	BirdListResp   = birdservice.BirdListResp
	BirdUpdateReq  = birdservice.BirdUpdateReq
	BirdUpdateResp = birdservice.BirdUpdateResp

	Bird interface {
		BirdAdd(ctx context.Context, in *BirdAddReq, opts ...grpc.CallOption) (*BirdAddResp, error)
		BirdUpdate(ctx context.Context, in *BirdUpdateReq, opts ...grpc.CallOption) (*BirdUpdateResp, error)
		BirdList(ctx context.Context, in *BirdListReq, opts ...grpc.CallOption) (*BirdListResp, error)
		BirdInfo(ctx context.Context, in *BirdInfoReq, opts ...grpc.CallOption) (*BirdInfoResp, error)
		BirdDelete(ctx context.Context, in *BirdDeleteReq, opts ...grpc.CallOption) (*BirdDeleteResp, error)
	}

	defaultBird struct {
		cli zrpc.Client
	}
)

func NewBird(cli zrpc.Client) Bird {
	return &defaultBird{
		cli: cli,
	}
}

func (m *defaultBird) BirdAdd(ctx context.Context, in *BirdAddReq, opts ...grpc.CallOption) (*BirdAddResp, error) {
	client := birdservice.NewBirdClient(m.cli.Conn())
	return client.BirdAdd(ctx, in, opts...)
}

func (m *defaultBird) BirdUpdate(ctx context.Context, in *BirdUpdateReq, opts ...grpc.CallOption) (*BirdUpdateResp, error) {
	client := birdservice.NewBirdClient(m.cli.Conn())
	return client.BirdUpdate(ctx, in, opts...)
}

func (m *defaultBird) BirdList(ctx context.Context, in *BirdListReq, opts ...grpc.CallOption) (*BirdListResp, error) {
	client := birdservice.NewBirdClient(m.cli.Conn())
	return client.BirdList(ctx, in, opts...)
}

func (m *defaultBird) BirdInfo(ctx context.Context, in *BirdInfoReq, opts ...grpc.CallOption) (*BirdInfoResp, error) {
	client := birdservice.NewBirdClient(m.cli.Conn())
	return client.BirdInfo(ctx, in, opts...)
}

func (m *defaultBird) BirdDelete(ctx context.Context, in *BirdDeleteReq, opts ...grpc.CallOption) (*BirdDeleteResp, error) {
	client := birdservice.NewBirdClient(m.cli.Conn())
	return client.BirdDelete(ctx, in, opts...)
}
